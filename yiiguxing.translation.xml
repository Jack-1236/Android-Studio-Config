<application>
  <component name="AppStorage">
    <option name="newTranslationDialogWidth" value="596" />
    <option name="newTranslationDialogX" value="1620" />
    <option name="newTranslationDialogY" value="1070" />
    <option name="pinTranslationDialog" value="true" />
    <histories>
      <item value="java.lang.IllegalStateException: Expected a string but was BEGIN_ARRAY at line 1 column 519 path .role" />
      <item value="subscribe On" />
      <item value="observe On" />
      <item value="SECONDS" />
      <item value="new Scheduled Thread Pool" />
      <item value="Creates a thread pool that can schedule commands to run after a given delay, or to execute periodically. Params: corePoolSize – the number of threads to keep in the pool, even if they are idle threadFactory – the factory to use when the executor creates a new thread Returns: the newly created scheduled thread pool Throws: IllegalArgumentException – if corePoolSize &lt; 0 NullPointerException – if threadFactory is null" />
      <item value="Creates a thread pool that can schedule commands to run after a given delay, or to execute periodically. @param corePoolSize the number of threads to keep in the pool, even if they are idle @return the newly created scheduled thread pool @throws IllegalArgumentException if {@code corePoolSize &lt; 0}" />
      <item value="core Pool Size" />
      <item value="new Cached Thread Pool" />
      <item value="schedule" />
      <item value="Array Blocking Queue" />
      <item value="keep Alive Time" />
      <item value="maximum Pool Size" />
      <item value="Creates a new {@code ThreadPoolExecutor} with the given initial parameters, the default thread factory and the default rejected execution handler. &lt;p&gt;It may be more convenient to use one of the {@link Executors} factory methods instead of this general purpose constructor. @param corePoolSize the number of threads to keep in the pool, even if they are idle, unless {@code allowCoreThreadTimeOut} is set @param maximumPoolSize the maximum number of threads to allow in the pool @param keepAliveTime when the number of threads is greater than the core, this is the maximum time that excess idle threads will wait for new tasks before terminating. @param unit the time unit for the {@code keepAliveTime} argument @param workQueue the queue to use for holding tasks before they are executed. This queue will hold only the {@code Runnable} tasks submitted by the {@code execute} method. @throws IllegalArgumentException if one of the following holds:&lt;br&gt; {@code corePoolSize &lt; 0}&lt;br&gt; {@code keepAliveTime &lt; 0}&lt;br&gt; {@code maximumPoolSize &lt;= 0}&lt;br&gt; {@code maximumPoolSize &lt; corePoolSize} @throws NullPointerException if {@code workQueue} is null" />
      <item value="Thread Pool Executor" />
      <item value="Caused by: org.gradle.api.GradleException: Compilation error. See log for more details" />
      <item value="Unauthorized" />
      <item value="responseTask.get(2, TimeUnit.MINUTES) must not be null" />
      <item value="io.swagger.client.ApiException: Bad Request" />
      <item value="MINUTES" />
      <item value="Empty Coroutine Context" />
      <item value="lifecycle Scope" />
      <item value="Delicate Coroutines Api" />
      <item value="Opt In" />
      <item value="Set how long to show the view for. @param duration How long to display the message. Can be {@link LENGTH_SHORT}, {@link LENGTH_LONG}, {@link LENGTH_INDEFINITE}, or a custom duration in milliseconds." />
      <item value="DST ATOP" />
      <item value="MULTIPLY" />
      <item value="DST IN" />
      <item value="SRC OVER" />
      <item value="case 1: return Mode.SRC;" />
      <item value="CLEAR" />
      <item value="&lt;img src=&quot;{@docRoot}referenceandroidimagesgraphicscomposite_ADD.png&quot; &gt; &lt;figcaption&gt;Adds the source pixels to the destination pixels and saturates the result.&lt;figcaption&gt; &lt;p&gt; &lt;p&gt;\(\alpha_{out} = max(0, min(\alpha_{src} + \alpha_{dst}, 1))\)&lt;p&gt; &lt;p&gt;\(C_{out} = max(0, min(C_{src} + C_{dst}, 1))\)&lt;p&gt;" />
      <item value="scale Y" />
      <item value="animate" />
      <item value="set Scale Y" />
      <item value="The style on this component requires your app theme to be Theme.MaterialComponents (or a descendant)." />
      <item value="plus Seconds" />
      <item value="amount" />
      <item value="Temporal Amount" />
      <item value="plus Months" />
      <item value="date the milliseconds since January 1, 1970, 00:00:00 GMT." />
      <item value="Allocates a {@code Date} object and initializes it to represent the specified number of milliseconds since the standard base time known as &quot;the epoch&quot;, namely January 1, 1970, 00:00:00 GMT. @param date the milliseconds since January 1, 1970, 00:00:00 GMT." />
      <item value="access Token Lifetime" />
      <item value="refresh Token" />
      <item value="Attempt to invoke virtual method 'androidx.lifecycle.MutableLiveData com.example.onlinelibrary.onlineorder.viewmodel.ProductListViewModel.getOrderType()' on a null object reference" />
      <item value="get Role" />
      <item value="administrator" />
      <item value="jti" />
      <item value="amr" />
      <item value="packer" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="1328" />
        <entry key="ENGLISH" value="1329" />
        <entry key="GERMAN" value="2" />
        <entry key="FILIPINO" value="1" />
        <entry key="DUTCH" value="1" />
        <entry key="PORTUGUESE" value="1" />
        <entry key="WELSH" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1670209063198" />
  </component>
  <component name="Settings">
    <option name="translateDocumentation" value="true" />
  </component>
</application>