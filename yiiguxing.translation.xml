<application>
  <component name="AppStorage">
    <option name="newTranslationDialogWidth" value="596" />
    <option name="newTranslationDialogX" value="1620" />
    <option name="newTranslationDialogY" value="1070" />
    <option name="pinTranslationDialog" value="true" />
    <histories>
      <item value="Ignore" />
      <item value="Cannot figure out how to save this field into database. You can consider adding a type converter for it." />
      <item value="Create drawable from a bitmap, not dealing with density. @deprecated Use {@link BitmapDrawable(Resources, Bitmap)} to ensure that the drawable has correctly set its target density." />
      <item value="Cannot figure out how to save this field into database. You can consider adding a type converter for it" />
      <item value="Column Info" />
      <item value="To use Kotlin annotation processing tool (kapt)" />
      <item value="ould not find method kapt() for arguments [androidx.room:room-compiler:2.4.3] on object of type org.gradle.api.internal.artifacts.dsl.dependencies.DefaultDependencyHandler." />
      <item value="Requires Api" />
      <item value="Async List Differ" />
      <item value="Helper class for mapping a [PagingData] into a [RecyclerView.Adapter][androidx.recyclerview.widget.RecyclerView.Adapter]. For simplicity, [PagingDataAdapter] can often be used in place of this class. [AsyncPagingDataDiffer] is exposed for complex cases, and where overriding [PagingDataAdapter] to support paging isn't convenient." />
      <item value="expand List" />
      <item value="progress" />
      <item value="fill" />
      <item value="An array of booleans. When targeting the JVM, instances of this class are represented as `boolean[]`. @constructor Creates a new array of the specified [size], with all elements initialized to `false`." />
      <item value="Motion View Holder" />
      <item value="TYPE CONTACT" />
      <item value="layout constraint Baseline to Bottom Of" />
      <item value="layout constraint Bottom to Bottom Of" />
      <item value="touch Anchor Id" />
      <item value="TYPE CHILD" />
      <item value="TYPE GROUP" />
      <item value="Failed resolution of: LcomhjqxtoastXToast;" />
      <item value="Failed resolution of: LandroidxpagingPagingDataAdapter;" />
      <item value="Class Not Found Exception" />
      <item value="com.example.onlinelibrary.base.basepaging 3 library.adapter.Base Paging Adapter" />
      <item value="com.examp" />
      <item value="Failed resolution of: LcomexampleonlinelibraryonlineorderactivityallorderOrdersAdapter;" />
      <item value="unrecognized Attribute name MODULE (class com.sun.tools.javac.util.UnsharedNameTableNameImpl)" />
      <item value="Caused by: org.gradle.internal.resolve.ModuleVersionNotFoundException: Could not find org.jetbrains.kotlin:kotlin-stdlib-jdk8:2.2.0." />
      <item value="Caused by: org.gradle.api.internal.artifacts.ivyservice.DefaultLenientConfigurationArtifactResolveException: Could not resolve all files for configuration ':app:releaseCompileClasspath'." />
      <item value="Cannot access com.dabush.shen.mcrpos.tabs.pricechange.PriceChangeAdapter.MyBaseViewHolder" />
      <item value="org.gradle.api.tasks.TaskExecutionException: Execution failed for task ':app:compileReleaseJavaWithJavac'." />
      <item value="Failed to apply plugin 'com.android.internal.application'. &gt; Android Gradle plugin requires Java 11 to run. You are cu" />
      <item value="table ids are unsupported on PagingDataAdapter." />
      <item value="Refresh the data presented by this [PagingDataAdapter]. [refresh] triggers the creation of a new [PagingData] with a new instance of [PagingSource] to represent an updated snapshot of the backing dataset. If a [RemoteMediator] is set, calling [refresh] will also trigger a call to [RemoteMediator.load] with [LoadType] [REFRESH] to allow [RemoteMediator] to check for updates to the dataset backing [PagingSource]. Note: This API is intended for UI-driven refresh signals, such as swipe-to-refresh. Invalidation due repository-layer signals, such as DB-updates, should instead use [PagingSource.invalidate]. @see PagingSource.invalidate @sample androidx.paging.samples.refreshSample" />
      <item value="Coerces an index in the list, including placeholders, to closest loaded page in [pages]. This function can be called with [anchorPosition] to fetch the loaded page that is closest to the last accessed index in the list. @param anchorPosition Index in the list, including placeholders. @return The closest loaded [Value] in [pages] to the provided [anchorPosition]. `null` if all loaded [pages] are empty." />
      <item value="anchor Position" />
      <item value="closest Page To Position" />
      <item value="initial Load Size" />
      <item value="Provide a [Key] used for the initial [load] for the next [PagingSource] due to invalidation of this [PagingSource]. The [Key] is provided to [load] via [LoadParams.key]. The [Key] returned by this method should cause [load] to load enough items to fill the viewport around the last accessed position, allowing the next generation to transparently animate in. The last accessed position can be retrieved via [state.anchorPosition][PagingState.anchorPosition], which is typically the top-most or bottom-most item in the viewport due to access being triggered by binding items as they scroll into view. For example, if items are loaded based on integer position keys, you can return [state.anchorPosition][PagingState.anchorPosition]. Alternately, if items contain a key used to load, get the key from the item in the page at index [state.anchorPosition][PagingState.anchorPosition]. @param state [PagingState] of the currently fetched data, which includes the most recently accessed position in the list via [PagingState.anchorPosition]. @return [Key] passed to [load] after invalidation used for initial load of the next generation. The [Key] returned by [getRefreshKey] should load pages centered around user's current viewport. If the correct [Key] cannot be determined, `null` can be returned to allow [load] decide what default key to use." />
      <item value="prev Key" />
      <item value="key Reuse Supported" />
      <item value="Success result object for [PagingSource.load]. @param data Loaded data @param prevKey [Key] for previous page if more data can be loaded in that direction, `null` otherwise. @param nextKey [Key] for next page if more data can be loaded in that direction, `null` otherwise." />
      <item value="pre Key" />
      <item value="initial Key" />
      <item value="Prepend" />
      <item value="get Refresh Key" />
      <item value="Parent job is Cancelling" />
      <item value="anchor Page Index" />
      <item value="Refresh the data presented by this [PagingDataAdapter]. [refresh] triggers the creation of a new [PagingData] with a new instance of [PagingSource] to represent an updated snapshot of the backing dataset. If a [RemoteMediator] is set, calling [refresh] will also trigger a call to [RemoteMediator.load] with [LoadType] [REFRESH] to allow [RemoteMediator] to check for updates to the dataset backing [PagingSource]. Note: This API is intended for UI-driven refresh signals, such as swipe-to-refresh. Invalidation due repository-layer signals, such as DB-updates, should instead use" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="1246" />
        <entry key="ENGLISH" value="1247" />
        <entry key="GERMAN" value="2" />
        <entry key="FILIPINO" value="1" />
        <entry key="DUTCH" value="1" />
        <entry key="PORTUGUESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1669604404429" />
  </component>
  <component name="Settings">
    <option name="translateDocumentation" value="true" />
  </component>
</application>